from django.contrib.auth.views import LogoutView
from django.core.mail import send_mail
from django.conf import settings
from django.contrib import messages
from django.shortcuts import redirect
from django.views.generic.edit import FormView
from django.contrib.auth import login
from django.urls import reverse_lazy
from .forms import RegistrationForm, CodeConfirmationForm, AuthorizationForm
from Registration_app.models import Send_Reg_Code
import secrets
import string

class RegistrationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = RegistrationForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__
        context['title'] = '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'
        context['subtitle'] = '–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ World IT'
        return context

    def form_valid(self, form):
        password = form.cleaned_data['password']
        confirm_password = form.cleaned_data['confirm_password']
        email = form.cleaned_data['email']

        if password != confirm_password:
            form.add_error('confirm_password', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
            return self.form_invalid(form)

        code = ''.join(secrets.choice(string.digits) for _ in range(6))
        self.request.session['registration_email'] = email
        self.request.session['registration_password'] = password
        self.request.session['verification_code'] = code

        Send_Reg_Code.objects.update_or_create(
            email=email,
            defaults={'code': code}
        )

        try:
            subject = '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è World IT Messenger!'
            message = f"""
–í—ñ—Ç–∞—î–º–æ —É World IT Messenger! üëã

–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –∞–¥—Ä–µ—Å–∏:

{code}

–í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.

–î—è–∫—É—î–º–æ –∑–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è!
–ö–æ–º–∞–Ω–¥–∞ World IT Messenger üöÄ
"""
            send_mail(
                subject=subject,
                message=message,
                from_email=settings.EMAIL_HOST_USER,
                recipient_list=[email],
                fail_silently=False
            )
            messages.success(self.request, '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É')
            return redirect('confirm_code')
        except Exception as e:
            print(e)
            return self.form_invalid(form)

class CodeConfirmationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = CodeConfirmationForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__
        context['title'] = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏'
        context['subtitle'] = f'–ú–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É ({self.request.session.get("registration_email")}). –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–∏–∂—á–µ.'
        return context

    def form_valid(self, form):
        entered_code = ''.join([
            form.cleaned_data.get('code_1', ''),
            form.cleaned_data.get('code_2', ''),
            form.cleaned_data.get('code_3', ''),
            form.cleaned_data.get('code_4', ''),
            form.cleaned_data.get('code_5', ''),
            form.cleaned_data.get('code_6', ''),
        ])

        verification_code = self.request.session.get('verification_code')

        if entered_code == verification_code:
            return redirect('authorization')
        else:
            form.add_error(None, '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')  
            return self.form_invalid(form)


class AuthorizationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = AuthorizationForm
    success_url = reverse_lazy('messenger')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__
        context['title'] = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è'
        context['subtitle'] = '–†–∞–¥–∏ —Ç–µ–±–µ –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏!'
        return context

    def form_valid(self, form):
        email = form.cleaned_data['email']
        password = form.cleaned_data['password']
        return super().form_valid(form)

class CustomLogoutView(LogoutView):
    next_page = 'authorization'  

    def dispatch(self, request, *args, **kwargs):
        response = super().dispatch(request, *args, **kwargs)
        if request.user.is_authenticated:
            request.session['step'] = 'authorization'  
        return response
