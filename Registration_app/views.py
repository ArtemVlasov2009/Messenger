from django.contrib.auth.views import LogoutView
from django.core.mail import send_mail
from django.conf import settings
from django.contrib import messages
from django.shortcuts import redirect, render
from django.views.generic.edit import FormView
from django.contrib.auth import login, authenticate
from django.urls import reverse_lazy
from django.contrib.auth import get_user_model
from .forms import RegistrationForm, CodeConfirmationForm, AuthorizationForm
from .models import Send_Reg_Code
import secrets
import string
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)

User = get_user_model()

class RegistrationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = RegistrationForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__
        context['title'] = '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'
        context['subtitle'] = '–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ World IT'
        context['view_type'] = 'registration'
        return context

    def form_valid(self, form):
        email = form.cleaned_data['email']
        password = form.cleaned_data['password']

        code = ''.join(secrets.choice(string.digits) for _ in range(6))

        self.request.session['registration_email'] = email
        self.request.session['registration_password'] = password
        self.request.session['verification_code'] = code

        Send_Reg_Code.objects.update_or_create(
            email=email,
            defaults={
                'code': code,
                'expires_at': timezone.now() + timezone.timedelta(minutes=15)
            }
        )

        try:
            subject = '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è World IT Messenger!'
            message_body = f"""
–í—ñ—Ç–∞—î–º–æ —É World IT Messenger! üëã

–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –∞–¥—Ä–µ—Å–∏:

{code}

–í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π 15 —Ö–≤–∏–ª–∏–Ω.

–î—è–∫—É—î–º–æ –∑–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è!
–ö–æ–º–∞–Ω–¥–∞ World IT Messenger üöÄ
"""
            send_mail(
                subject=subject,
                message=message_body,
                from_email=settings.EMAIL_HOST_USER,
                recipient_list=[email],
                fail_silently=False
            )
            messages.success(self.request, '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É.')
            logger.info(f"Verification code sent to {email}")
            return redirect('confirm_code')
        except Exception as e:
            logger.error(f"Error sending email to {email}: {e}")
            messages.error(self.request, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.')
            self._cleanup_session()
            return self.form_invalid(form)

    def form_invalid(self, form):
        logger.warning(f"Invalid registration form: {form.errors}")
        self._cleanup_session()
        context = self.get_context_data(form=form)
        return self.render_to_response(context)

    def _cleanup_session(self):
        """Helper method to clean up session data."""
        session_keys = ['registration_email', 'registration_password', 'verification_code']
        for key in session_keys:
            self.request.session.pop(key, None)

class CodeConfirmationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = CodeConfirmationForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__
        context['title'] = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏'
        email = self.request.session.get('registration_email', '–≤–∞—à—É –ø–æ—à—Ç—É')
        context['subtitle'] = f'–ú–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –Ω–∞ {email}. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–∏–∂—á–µ.'
        context['view_type'] = 'confirmation'
        return context

    def form_valid(self, form):
        entered_code_list = [
            form.cleaned_data.get('code_1', ''),
            form.cleaned_data.get('code_2', ''),
            form.cleaned_data.get('code_3', ''),
            form.cleaned_data.get('code_4', ''),
            form.cleaned_data.get('code_5', ''),
            form.cleaned_data.get('code_6', ''),
        ]
        entered_code = ''.join(entered_code_list)

        verification_code = self.request.session.get('verification_code')
        registration_email = self.request.session.get('registration_email')
        registration_password = self.request.session.get('registration_password')
        try:
            reg_code = Send_Reg_Code.objects.get(email=registration_email)
            is_code_valid = entered_code == verification_code == reg_code.code
            is_code_not_expired = reg_code.expires_at > timezone.now()
        except Send_Reg_Code.DoesNotExist:
            is_code_valid = False
            is_code_not_expired = False

        if is_code_valid and is_code_not_expired:
            if registration_email and registration_password:
                try:
                    if User.objects.filter(email=registration_email).exists():
                        messages.error(self.request, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.')
                        logger.warning(f"Duplicate email attempted: {registration_email}")
                        self._cleanup_session()
                        Send_Reg_Code.objects.filter(email=registration_email).delete()
                        return redirect('registration')

                    user = User.objects.create_user(
                        username=registration_email,
                        email=registration_email,
                        password=registration_password
                    )
                    user.is_active = True
                    user.save()

                    messages.success(self.request, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.')
                    self._cleanup_session()
                    Send_Reg_Code.objects.filter(email=registration_email).delete()
                    logger.info(f"User {registration_email} registered successfully")
                    return redirect('authorization')

                except Exception as e:
                    logger.error(f"Error creating user {registration_email}: {e}")
                    messages.error(self.request, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.')
                    self._cleanup_session()
                    return redirect('registration')
            else:
                messages.error(self.request, '–î–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ —Å–µ—Å—ñ—ó. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ.')
                logger.warning("Missing session data during code confirmation")
                self._cleanup_session()
                return redirect('registration')
        else:
            messages.error(self.request, '–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.')
            form.add_error(None, '–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.')
            logger.warning(f"Invalid or expired code for {registration_email}: {entered_code}")
            return self.form_invalid(form)

    def post(self, request, *args, **kwargs):
        if 'resend_code' in request.POST:
            email = request.session.get('registration_email')
            if email:
                code = ''.join(secrets.choice(string.digits) for _ in range(6))
                request.session['verification_code'] = code
                Send_Reg_Code.objects.update_or_create(
                    email=email,
                    defaults={
                        'code': code,
                        'expires_at': timezone.now() + timezone.timedelta(minutes=15)
                    }
                )
                try:
                    send_mail(
                        subject='‚úÖ –ù–æ–≤–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è World IT Messenger!',
                        message=f"–í–∞—à –Ω–æ–≤–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {code}\n–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π 15 —Ö–≤–∏–ª–∏–Ω.",
                        from_email=settings.EMAIL_HOST_USER,
                        recipient_list=[email],
                        fail_silently=False
                    )
                    messages.success(request, '–ù–æ–≤–∏–π –∫–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É.')
                    logger.info(f"Resent verification code to {email}")
                except Exception as e:
                    logger.error(f"Error resending email to {email}: {e}")
                    messages.error(request, '–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
                    self._cleanup_session()
            else:
                messages.error(request, '–î–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ.')
                self._cleanup_session()
                return redirect('registration')
            return redirect('confirm_code')
        return super().post(request, *args, **kwargs)

    def _cleanup_session(self):
        """Helper method to clean up session data."""
        session_keys = ['registration_email', 'registration_password', 'verification_code']
        for key in session_keys:
            self.request.session.pop(key, None)

class AuthorizationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = AuthorizationForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__
        context['title'] = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è'
        context['subtitle'] = '–†–∞–¥–∏ —Ç–µ–±–µ –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏!'
        context['view_type'] = 'authorization'
        return context

    def form_valid(self, form):
        email = form.cleaned_data['email']
        password = form.cleaned_data['password']

        user = authenticate(self.request, username=email, password=password)

        if user is None:
            try:
                user_obj = User.objects.get(email=email)
                user = authenticate(self.request, username=user_obj.username, password=password)
            except User.DoesNotExist:
                pass

        if user is not None:
            if user.is_active:
                login(self.request, user)
                messages.success(self.request, f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.username}!')
                logger.info(f"User {user.username} logged in successfully")
                next_url = self.request.GET.get('next') or 'messenger_page'
                return redirect(next_url)
            else:
                messages.error(self.request, '–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –ø–æ—à—Ç—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.')
                form.add_error(None, '–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.')
                logger.warning(f"Inactive account login attempt: {email}")
                return self.form_invalid(form)
        else:
            messages.error(self.request, '–ù–µ–≤—ñ—Ä–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.')
            form.add_error(None, '–ù–µ–≤—ñ—Ä–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å.')
            logger.warning(f"Failed login attempt for {email}")
            return self.form_invalid(form)

    def form_invalid(self, form):
        logger.warning(f"Invalid authorization form: {form.errors}")
        context = self.get_context_data(form=form)
        return self.render_to_response(context)

class CustomLogoutView(LogoutView):
    next_page = reverse_lazy('authorization')