from django.contrib.auth.views import LogoutView
from django.core.mail import send_mail
from django.conf import settings
from django.contrib import messages
from django.shortcuts import redirect, render 
from django.views.generic.edit import FormView
from django.contrib.auth import login, authenticate 
from django.urls import reverse_lazy
from django.contrib.auth import get_user_model


from .forms import RegistrationForm, CodeConfirmationForm, AuthorizationForm
from .models import Send_Reg_Code

import secrets
import string


User = get_user_model()



class RegistrationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = RegistrationForm


    def get_context_data(self, **kwargs):
        """–î–æ–¥–∞—î –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —à–∞–±–ª–æ–Ω—É."""
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__ 
        context['title'] = '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'
        context['subtitle'] = '–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ World IT'
        context['view_type'] = 'registration' 
        return context

    def form_valid(self, form):
        password = form.cleaned_data['password']
        confirm_password = form.cleaned_data['confirm_password']
        email = form.cleaned_data['email']

        if password != confirm_password:
            form.add_error('confirm_password', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
            return self.form_invalid(form)

        code = ''.join(secrets.choice(string.digits) for _ in range(6))

        self.request.session['registration_email'] = email
        self.request.session['registration_password'] = password
        self.request.session['verification_code'] = code

        Send_Reg_Code.objects.update_or_create(
            email=email,
            defaults={'code': code}
        )

        try:
            subject = '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è World IT Messenger!'
            message_body = f"""
–í—ñ—Ç–∞—î–º–æ —É World IT Messenger! üëã

–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –∞–¥—Ä–µ—Å–∏:

{code}

–í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.

–î—è–∫—É—î–º–æ –∑–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è!
–ö–æ–º–∞–Ω–¥–∞ World IT Messenger üöÄ
"""
            send_mail(
                subject=subject,
                message=message_body,
                from_email=settings.EMAIL_HOST_USER, 
                recipient_list=[email],
                fail_silently=False 
            )
            messages.success(self.request, '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É')
            return redirect('confirm_code')
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email: {e}")
            messages.error(self.request, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∫–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
            return self.form_invalid(form)

    def form_invalid(self, form):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç—å —à–∞–±–ª–æ–Ω –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ—é —Ñ–æ—Ä–º–æ—é —Ç–∞ –ø–æ–º–∏–ª–∫–∞–º–∏."""
        context = self.get_context_data(form=form)
        return self.render_to_response(context)


class CodeConfirmationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = CodeConfirmationForm

    def get_context_data(self, **kwargs):
        """–î–æ–¥–∞—î –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —à–∞–±–ª–æ–Ω—É."""
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__ 
        context['title'] = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏'
        email_to_confirm = self.request.session.get('registration_email', '–≤–∞—à—É –ø–æ—à—Ç—É')
        context['subtitle'] = f'–ú–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –Ω–∞ {email_to_confirm}. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–∏–∂—á–µ.'
        context['view_type'] = 'confirmation'
        return context

    def form_valid(self, form):
        """–û–±—Ä–æ–±–ª—è—î –≤–∞–ª—ñ–¥–Ω—É —Ñ–æ—Ä–º—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–¥—É."""
        entered_code_list = [
            form.cleaned_data.get('code_1', ''),
            form.cleaned_data.get('code_2', ''),
            form.cleaned_data.get('code_3', ''),
            form.cleaned_data.get('code_4', ''),
            form.cleaned_data.get('code_5', ''),
            form.cleaned_data.get('code_6', ''),
        ]
        entered_code = ''.join(entered_code_list)

        verification_code = self.request.session.get('verification_code')
        registration_email = self.request.session.get('registration_email')
        registration_password = self.request.session.get('registration_password')

        is_code_valid = entered_code == verification_code

        if is_code_valid:

            if registration_email and registration_password:
                try:

                    if User.objects.filter(email=registration_email).exists():
                         messages.error(self.request, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π.')

                         if 'registration_email' in self.request.session: del self.request.session['registration_email']
                         if 'registration_password' in self.request.session: del self.request.session['registration_password']
                         if 'verification_code' in self.request.session: del self.request.session['verification_code']
                         return redirect('registration')

                    user = User.objects.create_user(username=registration_email, email=registration_email, password=registration_password)
                    user.is_active = True 
                    user.save()

                    messages.success(self.request, '–ü–æ—à—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.')

                    if 'registration_email' in self.request.session: del self.request.session['registration_email']
                    if 'registration_password' in self.request.session: del self.request.session['registration_password']
                    if 'verification_code' in self.request.session: del self.request.session['verification_code']


                    return redirect('authorization')

                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {e}")
                    messages.error(self.request, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.')
                    return redirect('registration')

            else:
                messages.error(self.request, '–î–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ —Å–µ—Å—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ.')
                if 'registration_email' in self.request.session: del self.request.session['registration_email']
                if 'registration_password' in self.request.session: del self.request.session['registration_password']
                if 'verification_code' in self.request.session: del self.request.session['verification_code']
                return redirect('registration') 

        else:
            messages.error(self.request, '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
            form.add_error(None, '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è') 
            return self.form_invalid(form)

    def form_invalid(self, form):
         """–†–µ–Ω–¥–µ—Ä–∏—Ç—å —à–∞–±–ª–æ–Ω –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ—é —Ñ–æ—Ä–º–æ—é —Ç–∞ –ø–æ–º–∏–ª–∫–∞–º–∏."""
         context = self.get_context_data(form=form)
         return self.render_to_response(context)



class AuthorizationView(FormView):
    template_name = 'Registration_app/registration_authorization.html'
    form_class = AuthorizationForm


    def get_context_data(self, **kwargs):
        """–î–æ–¥–∞—î –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —à–∞–±–ª–æ–Ω—É."""
        context = super().get_context_data(**kwargs)
        context['form_name'] = self.form_class.__name__ 
        context['title'] = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è'
        context['subtitle'] = '–†–∞–¥–∏ —Ç–µ–±–µ –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏!'
        context['view_type'] = 'authorization'
        return context

    def form_valid(self, form):
        email_or_username = form.cleaned_data['email']
        password = form.cleaned_data['password']

        user = authenticate(request=self.request, username=email_or_username, password=password)

        if user is not None:
            if user.is_active:
                login(self.request, user)
                messages.success(self.request, f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.username}!')
                next_url = self.request.GET.get('next')
                if next_url:
                    return redirect(next_url)
                else:
                    return redirect(settings.LOGIN_REDIRECT_URL) 

            else:
                messages.error(self.request, '–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.')
                form.add_error(None, '–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.') 
                return self.form_invalid(form)

        else:
            messages.error(self.request, '–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å.')
            form.add_error(None, '–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ.') 

            return self.form_invalid(form)

    def form_invalid(self, form):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç—å —à–∞–±–ª–æ–Ω –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ—é —Ñ–æ—Ä–º–æ—é —Ç–∞ –ø–æ–º–∏–ª–∫–∞–º–∏."""
        context = self.get_context_data(form=form)
        return self.render_to_response(context)



class CustomLogoutView(LogoutView):

    next_page = reverse_lazy('authorization') 
